"""
Rules for local assembly of genomic regions.
"""
import os

print("Local assembly with Celera")

# Load regions to assemble.
if config.get("assembly") and config["assembly"].get("regions_to_assemble"):
    with open(config["assembly"]["regions_to_assemble"], "r") as fh:
        REGIONS_TO_ASSEMBLE = ["-".join(line.rstrip().split("\t")[:3]) for line in fh]
else:
    REGIONS_TO_ASSEMBLE = []

#
# Define internal constants.
#
ASSEMBLY_DIR = "sv_assembly"

#
# Define utility functions.
#

def _get_bamtools_region(wildcards):
    """
    Convert filesystem-safe filename of "chrom-start-end" to a bamtools-specific region of "chrom:start..end"
    """
    return wildcards["region"].replace("-", ":", 1).replace("-", "..", 1)

def _get_quiver_region(wildcards):
    """
    Convert filesystem-safe filename of "chrom-start-end" to the more-standard region of "chrom:start-end"
    """
    return wildcards["region"].replace("-", ":", 1)

#
# Define rules.
#

# Collect assemblies.
rule collect_celera_assemblies:
    input: expand("sv_assembly/{region}/consensus.fasta", region=REGIONS_TO_ASSEMBLE)
    output: "sv_assemblies.txt"
    params: sge_opts=""
    # TODO: create module for Celera scripts
    shell: "find {input} > {output}"

rule complete_assemble_with_celera:
    input: alignments="alignments.fofn"
    output: "sv_assembly/{region}/consensus.fasta"
    params: sge_opts="-l mfree=1G -pe serial 4", region=_get_bamtools_region, mapping_quality_threshold=str(config["assembly"]["mapping_quality"]), quiver_region=_get_quiver_region
    shell:
        "mkdir -p {TMP_DIR}/{wildcards.region}; "
        "bamtools filter -list {input.alignments} -region {params.region} -mapQuality \">={params.mapping_quality_threshold}\" "
            "| samtools view - "
            "| awk '{{ print \">\"$1; print $10 }}' > {TMP_DIR}/{wildcards.region}/reads.fasta; "
        "~mchaisso/projects/PacBioSequencing/scripts/FastaToFakeFastq.py {TMP_DIR}/{wildcards.region}/reads.fasta {TMP_DIR}/{wildcards.region}/reads.fastq; "
        "~mchaisso/software/source/celera-svn/wgs/Linux-amd64/bin/fastqToCA -libraryname {wildcards.region} -technology pacbio-raw -reads {TMP_DIR}/{wildcards.region}/reads.fastq > {TMP_DIR}/{wildcards.region}/reads.frg; "
        "~mchaisso/software/wgs-8.1/Linux-amd64/bin/runCA -p assembly -d {TMP_DIR}/{wildcards.region} ovlErrorRate=0.40 utgGraphErrorRate=0.40 cnsErrorRate=0.40 cgwErrorRate=0.40 unitigger=bogart obtErrorRate=0.30 {TMP_DIR}/{wildcards.region}/reads.frg ovlThreads=4; "
        "cp {TMP_DIR}/{wildcards.region}/9-terminator/assembly.ctg.fasta {TMP_DIR}/{wildcards.region}/assembly.fasta; "
        "source ~mchaisso/scripts/setup_pacbio.sh; "
        "export PYTHONPATH=/net/eichler/vol5/home/mchaisso/projects/PacBioSequencing/scripts:$PYTHONPATH; "
        "python scripts/RegionToConsensusBAMs.py {input.alignments} --region {params.quiver_region} --delta 30000 --tmpdir {TMP_DIR}  --reference {TMP_DIR}/{wildcards.region}/assembly.fasta --consensus {TMP_DIR}/{wildcards.region}/consensus.fasta --p5c3; "
        "rsync -Wr --remove-source-files {TMP_DIR}/{wildcards.region} sv_assembly/; "
        "rm -rf {TMP_DIR}/{wildcards.region}"
