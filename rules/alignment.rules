"""
Rules to align PacBio reads to a given reference assembly and summarize
alignments.
"""

import math
import os

localrules: assign_batches, align_reads

# Make a list of batches to split reads into.
BATCHES = list(range(int(config.get("batches", "1"))))

# User-defined file of alignments with one absolute path to a BAM per line.
ALIGNMENTS = config.get("alignments", "alignments.fofn")
ALIGNMENTS_DIR = config.get("alignments_dir", "alignments")
THREADS = int(config.get("threads", "1"))

# Create a list of BAM files for downstream analysis.
rule align_reads:
    input: expand("%s/{batch_id}.bam" % ALIGNMENTS_DIR, batch_id=BATCHES)
    output: ALIGNMENTS
    shell: "for alignment in {input}; do echo `pwd`/$alignment; done > {output}"

# Plot alignment lengths.
rule plot_alignment_summaries:
    input: "alignment_lengths.tab"
    output: "alignment_lengths.pdf"
    shell: "Rscript plot_read_lengths_by_type.R {input} {output}"

# Collect summary of aligned read lengths.
rule collect_alignment_summaries:
    input: expand("alignment_lengths/{batch_id}.tab", batch_id=BATCHES)
    output: "alignment_lengths.tab"
    shell: """awk 'OFS="\\t" {{ if (NR == 1) {{ print "alignment_status","subread_length","aligned_length" }} print }}' {input} > {output}"""

# Summarize alignments by length.
# TODO: get subread lengths at the same time as the aligned lengths.
rule get_subread_and_alignment_lengths:
    input: "%s/{batch_id}.bam" % ALIGNMENTS_DIR
    output: "alignment_lengths/{batch_id}.tab"
    params: mapping_quality_threshold=config.get("mapping_quality")
    shell:
        "mkdir -p {TMP_DIR}; "
        """samtools view {input} | awk 'OFS="\\t" {{ if ($3 == "*" || $5 >= {params.mapping_quality_threshold}) {{ num_of_pieces = split($1, pieces, "/"); num_of_coords = split(pieces[3], coords, "_"); subread_length = coords[2] - coords[1]; if ($3 == "*") {{ print "unmapped",subread_length,length($10) }} else if ($5 >= 30) {{ print "mapped",subread_length,$9 }} }} }}' > {TMP_DIR}/lengths.`basename {output}`; """
        "rsync --remove-source-files {TMP_DIR}/lengths.`basename {output}` {output}; "

# Sync input reads and reference assembly to local disk, align reads, sort
# output, and write final BAM to shared disk.
rule align_batch:
    input:
        reads="%s_reads/{batch_id}.fofn" % ALIGNMENTS_DIR,
        reference=config["reference"],
        suffix=config.get("suffix_array", "%s.sa" % config["reference"]),
        ctab=config.get("ctab", "%s.ctab" % config["reference"])
    output:
        bam=protected("%s/{batch_id}.bam" % ALIGNMENTS_DIR),
        bai=protected("%s/{batch_id}.bam.bai" % ALIGNMENTS_DIR)
    params:
        threads=str(THREADS),
        samtools_threads="1",
        samtools_memory="4G",
        bwlimit="30000",
        alignment_parameters=config.get("alignment_parameters", "").strip('"')
    run:

        if os.path.getsize(input.reads) > 0:

            shell(
                """export REFERENCE_PATH=`readlink -f {input.reference}`; """
                """export REFERENCE_SUFFIX_PATH=`readlink -f {input.suffix}`; """
                """export REFERENCE_CTAB_PATH=`readlink -f {input.ctab}`; """
                """set -o pipefail; """
                """set -e; """
                """ALIGN_BATCH_TEMP={TMP_DIR}/{wildcards.batch_id}; """
                """mkdir -p ${{ALIGN_BATCH_TEMP}}; """
                """LD_LIBRARY_PATH=/net/eichler/vol18/paudano/pitchfork/20170228/lib:${{LD_LIBRARY_PATH}} """
                """/net/eichler/vol18/paudano/pitchfork/20170228/bin/blasr {input.reads} $REFERENCE_PATH --unaligned /dev/null --out ${{ALIGN_BATCH_TEMP}}/batch_out.bam --sam --sa $REFERENCE_SUFFIX_PATH --ctab $REFERENCE_CTAB_PATH --nproc {params.threads} --clipping subread {params.alignment_parameters}; """
                """samtools sort -@ {params.samtools_threads} -m {params.samtools_memory} -O bam -T ${{ALIGN_BATCH_TEMP}}/{wildcards.batch_id} -o {output.bam} ${{ALIGN_BATCH_TEMP}}/batch_out.bam; """
                """samtools index {output.bam}; """
                """rm -rf ${{ALIGN_BATCH_TEMP}}"""
            )

        else:
            # Empty FOFN, generate empty BAM
            shell(
                """echo -e "@HD\tVN:1.3\tSO:coordinate" | samtools view -b > {output.bam}; """
                """samtools index {output.bam}"""
            )

# Divide input reads into batches for alignment.
rule assign_batches:
    input: config.get("reads", "")
    output: "%s_reads/{batch_id}.fofn" % ALIGNMENTS_DIR
    run:
        output_dir = os.path.dirname(output[0])

        with open(input[0], "r") as fh:
            input_files = [os.path.realpath(line.rstrip()) for line in fh]

        files_per_batch = int(math.ceil(len(input_files) / float(len(BATCHES))))
        start = int(wildcards["batch_id"]) * files_per_batch
        end = min(start + files_per_batch, len(input_files))

        with open(output[0], "w") as oh:
            for input_file in input_files[start:end]:
                oh.write("%s\n" % input_file)
